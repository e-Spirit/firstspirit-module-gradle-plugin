import java.nio.file.Files
import java.util.regex.Pattern

/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'groovy'
    id 'maven-publish'
    id 'idea'
    id 'java-gradle-plugin'
    id 'com.dorongold.task-tree' version '1.5'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    fsmAnnotationsVersion = '1.9.3'

    // set version to {{issue.key}}-SNAPSHOT for feature branches
    try {
        def branchName = "git rev-parse --abbrev-ref HEAD".execute().text.trim()
        def matcher = Pattern.compile('(?:.*/)?[^A-Z]*([A-Z]+-[0-9]+).*').matcher(branchName)
        if (matcher.matches()) {
            project.version = "${matcher.group(1)}-SNAPSHOT"
        }
    } catch (IOException e) {
        println "Failure determining branch name: $e"
    }
}

description = 'Gradle plugin to build FirstSpirit modules (FSMs).'
group = 'de.espirit.gradle'

repositories {
    maven {
        url 'https://artifactory.e-spirit.de/artifactory/repo'
        credentials {
            username = "${artifactory_username}"
            password = "${artifactory_password}"
        }
    }
}

gradlePlugin {
    plugins {
        firstSpiritModule {
            id = 'de.espirit.firstspirit-module'
            implementationClass = 'org.gradle.plugins.fsm.FSMPlugin'
        }
        firstSpiritModuleAnnotations {
            id = 'de.espirit.firstspirit-module-annotations'
            implementationClass = 'org.gradle.plugins.fsm.annotations.FSMAnnotationsPlugin'
        }
        firstSpiritModuleConfigurations {
            id = 'de.espirit.firstspirit-module-configurations'
            implementationClass = 'org.gradle.plugins.fsm.configurations.FSMConfigurationsPlugin'
        }
    }
}

def fsRuntimeVersion = '5.2.191107' // FirstSpirit 2019-11

dependencies {
    implementation gradleApi()
    implementation localGroovy()
    implementation 'io.github.classgraph:classgraph:4.8.60'
    implementation 'com.github.jk1:gradle-license-report:1.13'
    implementation "com.espirit.moddev.components:annotations:${fsmAnnotationsVersion}"
    implementation 'de.espirit.mavenplugins:fsmchecker:0.11'
    implementation "de.espirit.firstspirit:fs-isolated-runtime:${fsRuntimeVersion}"
    testImplementation "de.espirit.firstspirit:fs-isolated-runtime:${fsRuntimeVersion}"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testImplementation 'org.assertj:assertj-core:3.15.0'
    testImplementation 'commons-io:commons-io:2.6'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.2.4'
    testImplementation 'org.ow2.asm:asm:7.3.1'
    testImplementation gradleTestKit()
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'

    testImplementation('org.spockframework:spock-core:1.2-groovy-2.4') {
        exclude group: 'org.codehaus.groovy'
    }

}

sourceSets {
    test {
        resources.srcDirs += ['src/test/resources']
        resources.srcDirs += ['src/main/resources']
    }
}

jar {
	manifest {
		attributes 'Implementation-Title': 'Gradle FSM plugin',
				   'Implementation-Version': archiveVersion,
				   'Built-By': System.getProperty('user.name'),
				   'Built-Date': new Date(),
				   'Built-JDK': System.getProperty('java.version'),
				   'Built-Gradle': gradle.gradleVersion
	}
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    classifier "sources"
}

task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
    from javadoc.destinationDir
    classifier = 'javadoc'
}
task install(dependsOn: 'publishMavenJavaPublicationToMavenLocal', group:'publishing', description: 'Installs the maven Java artifact to the local Maven repository') {
    doLast {
        logger.info "Installed $project.name"
    }
}

task writePropertiesToResourceFile() {
    outputs.upToDateWhen { false }
    doLast {
        Properties props = new Properties()
        props.setProperty('fsm-annotations-version', project.fsmAnnotationsVersion)
        File propsFile = sourceSets.main.output.resourcesDir.toPath().resolve("versions.properties").toFile()
        File propsFileTest = sourceSets.test.output.resourcesDir.toPath().resolve("versions.properties").toFile()
        [propsFile, propsFileTest].forEach { targetFile ->
            targetFile.getParentFile().mkdirs()
            if(!targetFile.exists()) {
                Files.createFile(targetFile.toPath())
            }
            targetFile.newWriter().withCloseable { writer ->
                props.store(writer, null)
            }
        }
    }
}

jar.dependsOn writePropertiesToResourceFile
test.dependsOn writePropertiesToResourceFile

test {
    systemProperty "artifactory_username", findProperty("artifactory_username")
    systemProperty "artifactory_password", findProperty("artifactory_password")
    maxHeapSize = "2048m"
    useJUnitPlatform()
}

task integrationTest() {
    dependsOn("jar")
}

task setVersion() {
    doFirst {
        if(!System.getProperties().containsKey("nextVersion")) {
            throw new IllegalStateException("Pass a nextVersion parameter")
        }
        Properties props = new Properties()
        File propsFile = new File('gradle.properties')
        props.load(propsFile.newDataInputStream())
        props.setProperty('version', System.getProperty("nextVersion"))
        props.store(propsFile.newWriter(), null)
        props.load(propsFile.newDataInputStream())
    }
}

publishing {
    publications {
        pluginMaven(MavenPublication) {
            artifact sourceJar
            artifact packageJavadoc

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'FSM Gradle plugin')
                root.appendNode('description', 'Gradle plugin to build FirstSpirit modules (FSMs).')
                root.appendNode('inceptionYear', '2013')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'The Apache Software License, Version 2.0')
                license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                license.appendNode('distribution', 'repo')

                def developers = root.appendNode('developers')
                def developer = developers.appendNode('developer')
                developer.appendNode('id', 'moritzzimmer')
                developer.appendNode('name', 'Moritz Zimmer')
                developer.appendNode('email', 'moritz.zmmr@gmail.com')

                developer = developers.appendNode('developer')
                developer.appendNode('id', 'e-spirit')
                developer.appendNode('name', 'E-Spirit AG')
                developer.appendNode('email', 'produktmanagement@e-spirit.com')
            }
        }
    }
    repositories {
        maven {
            credentials {
                username "${artifactory_username}"
                password "${artifactory_password}"
            }
            url "https://artifactory.e-spirit.de/artifactory/${((version.endsWith("SNAPSHOT")) ? {'plugins-snapshot-local'} : {'plugins-release-local'})()}"
        }
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}
