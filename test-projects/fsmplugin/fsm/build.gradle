import java.nio.file.Paths
import java.util.zip.ZipFile

import static de.espirit.firstspirit.server.module.ModuleInfo.Mode.ISOLATED

plugins {
    id 'java'
    id 'de.espirit.firstspirit-module'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
//	fsProvidedCompile 'commons-logging:commons-logging:1.1.3'

    compileOnly 'de.espirit.firstspirit:fs-isolated-runtime:5.2.190507'

    fsServerCompile project(':api')
    fsModuleCompile project(':impl')
    fsWebCompile project(':web')
    fsModuleCompile fsDependency(dependency: 'joda-time:joda-time:2.10', skipInLegacy: true)
    fsModuleCompile fsDependency('commons-logging:commons-logging:1.2', true, '1.0', '1.5')
    fsModuleCompile fsDependency('org.apache.activemq:activemq-all:5.14.2', true)

    fsWebCompile fsDependency('org.apache.activemq:activemq-all:5.14.2', true)

    testCompile 'junit:junit:4.12'
}

jar {
    baseName = "testyMcTestface"
}

firstSpiritModule {
    moduleDirName = 'src/main/fsm'
    displayName = 'test-project displayName'
    resourceMode = ISOLATED
    //isolationDetectorUrl = 'https://fsdev.e-spirit.de/FsmDependencyDetector/'
    firstSpiritVersion = '5.2.190507'
    vendor = "e-Spirit AG"
    fsmDependencies = ['otherModuleName', 'yetAnotherModule']
}

def fsmArchivePath = Paths.get(project.buildDir.path, "fsm", "fsm-${project.version}.fsm")

task testFsmIsProduced {
    doLast {
        logger.info("Searching for fsm file in $fsmArchivePath")
        assert fsmArchivePath.toFile().exists()
    }
}

task testZipFileContainsModuleXml {
    doLast {
        ZipFile fsmFile = new ZipFile(fsmArchivePath.toString())
        def moduleXml = fsmFile.entries().find { "META-INF/module.xml" == it.getName() }
        assert moduleXml != null
    }
}

test.dependsOn tasks.assembleFSM, testFsmIsProduced, testZipFileContainsModuleXml
